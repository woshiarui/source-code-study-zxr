import {
  __esm,
  __export
} from "./chunk-OL3AADLO.js";

// src/packages/log/utils.ts
var utils_exports = {};
__export(utils_exports, {
  COLOR: () => COLOR,
  createCounter: () => createCounter,
  exist: () => exist,
  exitStatus2Str: () => exitStatus2Str,
  getPhaseFromExecutionContext: () => getPhaseFromExecutionContext,
  getReadableAnswer: () => getReadableAnswer,
  lane2LaneName: () => lane2LaneName,
  lanes2Str: () => lanes2Str,
  log: () => log
});
var logIndex, log, exist, getReadableAnswer, createCounter, exitStatus2Str, lanes2Str, lane2LaneName, getPhaseFromExecutionContext, COLOR;
var init_utils = __esm({
  "src/packages/log/utils.ts"() {
    "use strict";
    logIndex = 0;
    log = (color, label, message) => {
      console.log(
        `${logIndex++} %c ${label} %c`,
        `background-color: ${color}; color: #FFFFFF`,
        `background-color: inherit; color: inherit`,
        exist(message) ? message : ""
      );
    };
    exist = (data) => data !== void 0 && data !== null;
    getReadableAnswer = (count, answer) => {
      return `\u7B2C${count + 1}\u9898\uFF0C\u7B54\u6848\uFF1A${answer}`;
    };
    createCounter = (initialCount = 0) => {
      let count = initialCount;
      return {
        add() {
          count++;
        },
        reset() {
          count = initialCount;
        },
        get() {
          return count;
        }
      };
    };
    exitStatus2Str = (exitStatus) => {
      return [
        "RootIncomplete",
        "RootFatalErrored",
        "RootErrored",
        "RootSuspended",
        "RootSuspendedWithDelay",
        "RootCompleted"
      ][exitStatus];
    };
    lanes2Str = (lanes) => {
      const str = lanes.toString(2);
      return str.split("").reverse().reduce((prev, cur, i) => {
        let icon = cur;
        if (i !== 0 && i % 4 === 0) {
          icon += " ";
        }
        return icon + prev;
      }, "");
    };
    lane2LaneName = (lane) => {
      return {
        0: "NoLane",
        1: "SyncLane",
        2: "InputContinuousHydrationLane",
        4: "InputContinuousLane",
        8: "DefaultHydrationLane",
        16: "DefaultLane",
        32: "TransitionHydrationLane",
        64: "TransitionLane1",
        128: "TransitionLane2",
        256: "TransitionLane3",
        512: "TransitionLane4",
        1024: "TransitionLane5",
        2048: "TransitionLane6",
        4096: "TransitionLane7",
        8192: "TransitionLane8",
        16384: "TransitionLane9",
        32768: "TransitionLane10",
        65536: "TransitionLane11",
        131072: "TransitionLane12",
        262144: "TransitionLane13",
        524288: "TransitionLane14",
        1048576: "TransitionLane15",
        2097152: "TransitionLane16",
        4194304: "RetryLane1",
        8388608: "RetryLane2",
        16777216: "RetryLane3",
        33554432: "RetryLane4",
        67108864: "RetryLane5",
        134217728: "SelectiveHydrationLane",
        268435456: "IdleHydrationLane",
        536870912: "IdleLane",
        1073741824: "OffscreenLane"
      }[lane];
    };
    getPhaseFromExecutionContext = (executionContext) => {
      if ((executionContext & 2) !== 0) {
        return "render";
      }
      if ((executionContext & 4) !== 0) {
        return "commit";
      }
      return "noop";
    };
    COLOR = {
      SCHEDULE_COLOR: "#727999",
      RENDER_COLOR: "#327205",
      COMMIT_COLOR: "#997205",
      USERSPACE_COLOR: "#197205"
    };
  }
});

// src/packages/log/index.ts
var log_exports = {};
__export(log_exports, {
  bindHook: () => bindHook,
  getLibraryMethod: () => getLibraryMethod,
  logHook: () => logHook,
  logLibraryMethod: () => logLibraryMethod,
  utils: () => utils
});
function bindHook(bindWhere, callback) {
  where2LogList[bindWhere] = where2LogList[bindWhere] || [];
  where2LogList[bindWhere].push(callback);
}
function logHook(where, ...args) {
  const logList = where2LogList[where];
  Array.isArray(logList) && logList.forEach((cb) => cb(...args));
}
function logLibraryMethod(libraryMethod) {
  librayMethodMap[libraryMethod.name] = libraryMethod;
  return librayMethodMap;
}
function getLibraryMethod(name) {
  return librayMethodMap[name];
}
var utils, librayMethodMap, where2LogList;
var init_log = __esm({
  "src/packages/log/index.ts"() {
    "use strict";
    init_utils();
    log("#127299", "\u5361\u9882\uFF1A\u6B22\u8FCE\u4F7F\u7528\u300AReact\u6280\u672F\u63ED\u79D8\u300B\u914D\u5957\u8C03\u8BD5\u9879\u76EE\uFF0C\u73A9\u5F97\u5F00\u5FC3");
    utils = utils_exports;
    librayMethodMap = {};
    where2LogList = {};
  }
});

export {
  utils,
  bindHook,
  logHook,
  logLibraryMethod,
  getLibraryMethod,
  log_exports,
  init_log
};
//# sourceMappingURL=chunk-F6WUG4UT.js.map
