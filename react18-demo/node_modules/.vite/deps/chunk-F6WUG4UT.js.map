{
  "version": 3,
  "sources": ["../../../src/packages/log/utils.ts", "../../../src/packages/log/index.ts"],
  "sourcesContent": ["interface TWIP {\r\n  type: any;\r\n  tag: number;\r\n  memoizedProps: any;\r\n  pendingProps: any;\r\n}\r\n\r\nlet logIndex = 0;\r\n\r\nexport const log = (color: string, label: string, message?: any) => {\r\n\tconsole.log(\r\n    `${logIndex++} %c ${label} %c`,\r\n    `background-color: ${color}; color: #FFFFFF`,\r\n    `background-color: inherit; color: inherit`\r\n  , exist(message) ? message : '');\r\n}\r\n\r\nexport const exist = (data: any) => data !== undefined && data !== null;\r\n\r\nexport const getReadableAnswer = (count: number, answer: number) => {\r\n  return `\u7B2C${count + 1}\u9898\uFF0C\u7B54\u6848\uFF1A${answer}`;\r\n}\r\n\r\nexport const createCounter = (initialCount = 0) => {\r\n  let count = initialCount;\r\n  return {\r\n    add() {\r\n      count++;\r\n    },\r\n    reset() {\r\n      count = initialCount;\r\n    },\r\n    get() {\r\n      return count;\r\n    }\r\n  }\r\n}\r\n\r\n// perform work \u5B8C\u6210\u65F6\u7684\u72B6\u6001\r\nexport const exitStatus2Str = (exitStatus: number) => {\r\n  return [\r\n    'RootIncomplete',\r\n    'RootFatalErrored',\r\n    'RootErrored',\r\n    'RootSuspended',\r\n    'RootSuspendedWithDelay',\r\n    'RootCompleted'\r\n  ][exitStatus];\r\n}\r\n\r\nexport const lanes2Str = (lanes: number) => {\r\n  const str = lanes.toString(2);\r\n  return str.split('').reverse().reduce((prev, cur, i) => {\r\n    let icon = cur;\r\n    if (i !== 0 && i % 4 === 0) {\r\n      icon += ' ';\r\n    }\r\n    return icon + prev;\r\n  }, '')\r\n}\r\n\r\nexport const lane2LaneName = (lane: number) => {\r\n  return {\r\n    0b0000000000000000000000000000000: 'NoLane',\r\n    0b0000000000000000000000000000001: 'SyncLane',\r\n    0b0000000000000000000000000000010: 'InputContinuousHydrationLane',\r\n    0b0000000000000000000000000000100: 'InputContinuousLane',\r\n    0b0000000000000000000000000001000: 'DefaultHydrationLane',\r\n    0b0000000000000000000000000010000: 'DefaultLane',\r\n    0b0000000000000000000000000100000: 'TransitionHydrationLane',\r\n    0b0000000000000000000000001000000: 'TransitionLane1',\r\n    0b0000000000000000000000010000000: 'TransitionLane2',\r\n    0b0000000000000000000000100000000: 'TransitionLane3',\r\n    0b0000000000000000000001000000000: 'TransitionLane4',\r\n    0b0000000000000000000010000000000: 'TransitionLane5',\r\n    0b0000000000000000000100000000000: 'TransitionLane6',\r\n    0b0000000000000000001000000000000: 'TransitionLane7',\r\n    0b0000000000000000010000000000000: 'TransitionLane8',\r\n    0b0000000000000000100000000000000: 'TransitionLane9',\r\n    0b0000000000000001000000000000000: 'TransitionLane10',\r\n    0b0000000000000010000000000000000: 'TransitionLane11',\r\n    0b0000000000000100000000000000000: 'TransitionLane12',\r\n    0b0000000000001000000000000000000: 'TransitionLane13',\r\n    0b0000000000010000000000000000000: 'TransitionLane14',\r\n    0b0000000000100000000000000000000: 'TransitionLane15',\r\n    0b0000000001000000000000000000000: 'TransitionLane16',\r\n    0b0000000010000000000000000000000: 'RetryLane1',\r\n    0b0000000100000000000000000000000: 'RetryLane2',\r\n    0b0000001000000000000000000000000: 'RetryLane3',\r\n    0b0000010000000000000000000000000: 'RetryLane4',\r\n    0b0000100000000000000000000000000: 'RetryLane5',\r\n    0b0001000000000000000000000000000: 'SelectiveHydrationLane',\r\n    0b0010000000000000000000000000000: 'IdleHydrationLane',\r\n    0b0100000000000000000000000000000: 'IdleLane',\r\n    0b1000000000000000000000000000000: 'OffscreenLane'\r\n  }[lane];\r\n}\r\n\r\nexport const getPhaseFromExecutionContext = (executionContext: number) => {\r\n  if ((executionContext & 2) !== 0) {\r\n    return 'render';\r\n  }\r\n  if ((executionContext & 4) !== 0) {\r\n    return 'commit';\r\n  }\r\n  // \u7F3A\u5C11schedule\u9636\u6BB5\u7684\u5224\u65AD\r\n  return 'noop';\r\n}\r\n\r\nexport const COLOR = {\r\n  // \u5904\u4E8E\u8C03\u5EA6\u9636\u6BB5\r\n  SCHEDULE_COLOR: '#727999',\r\n  // \u5904\u4E8Erender\u9636\u6BB5\r\n  RENDER_COLOR: '#327205',\r\n  // \u5904\u4E8Ecommit\u9636\u6BB5\r\n  COMMIT_COLOR: '#997205',\r\n  // \u4E0D\u5904\u4E8EReact\u67D0\u4E2A\u9636\u6BB5\uFF0C\u800C\u662F\u7528\u6237\u4EE3\u7801\u4E2D\r\n  USERSPACE_COLOR: '#197205'\r\n}", "import * as u from './utils';\r\n\r\nu.log('#127299', '\u5361\u9882\uFF1A\u6B22\u8FCE\u4F7F\u7528\u300AReact\u6280\u672F\u63ED\u79D8\u300B\u914D\u5957\u8C03\u8BD5\u9879\u76EE\uFF0C\u73A9\u5F97\u5F00\u5FC3');\r\n\r\ntype TLogCB = (...args: any) => void;\r\n\r\ntype TLibrayMethod = (...args: any) => any;\r\n\r\nexport type Phase = 'commit' | 'render' | 'schedule';\r\n\r\nexport const utils = u;\r\n\r\ntype LibraryMethodName = 'getComponentNameFromFiber';\r\nconst librayMethodMap: {\r\n  [name in LibraryMethodName]?: TLibrayMethod\r\n} = {};\r\n\r\nexport function bindHook(bindWhere: string, callback: TLogCB) {\r\n  where2LogList[bindWhere] = where2LogList[bindWhere] || [];\r\n  where2LogList[bindWhere].push(callback);\r\n}\r\n\r\nconst where2LogList: {[where: string]: TLogCB[]} = {};\r\n\r\nexport function logHook(where: string, ...args: any) {\r\n  const logList = where2LogList[where];\r\n  Array.isArray(logList) && logList.forEach(cb => cb(...args));\r\n}\r\n\r\n// \u4ECE\u5E93\u91CC\u52A0\u8F7D\u65B9\u6CD5\r\nexport function logLibraryMethod(libraryMethod: TLibrayMethod){\r\n  librayMethodMap[libraryMethod.name as LibraryMethodName] = libraryMethod;\r\n  return librayMethodMap;\r\n}\r\n\r\n// \u4F7F\u7528\u5E93\u91CC\u7684\u65B9\u6CD5\r\nexport function getLibraryMethod(name: LibraryMethodName) {\r\n  return librayMethodMap[name];\r\n}"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOI,UAES,KAQA,OAEA,mBAIA,eAgBA,gBAWA,WAWA,eAqCA,8BAWA;AA7Gb;AAAA;AAAA;AAOA,IAAI,WAAW;AAER,IAAM,MAAM,CAAC,OAAe,OAAe,YAAkB;AACnE,cAAQ;AAAA,QACL,GAAG,iBAAiB;AAAA,QACpB,qBAAqB;AAAA,QACrB;AAAA,QACA,MAAM,OAAO,IAAI,UAAU;AAAA,MAAE;AAAA,IACjC;AAEO,IAAM,QAAQ,CAAC,SAAc,SAAS,UAAa,SAAS;AAE5D,IAAM,oBAAoB,CAAC,OAAe,WAAmB;AAClE,aAAO,SAAI,QAAQ,kCAAS;AAAA,IAC9B;AAEO,IAAM,gBAAgB,CAAC,eAAe,MAAM;AACjD,UAAI,QAAQ;AACZ,aAAO;AAAA,QACL,MAAM;AACJ;AAAA,QACF;AAAA,QACA,QAAQ;AACN,kBAAQ;AAAA,QACV;AAAA,QACA,MAAM;AACJ,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAGO,IAAM,iBAAiB,CAAC,eAAuB;AACpD,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,EAAE;AAAA,IACJ;AAEO,IAAM,YAAY,CAAC,UAAkB;AAC1C,YAAM,MAAM,MAAM,SAAS,CAAC;AAC5B,aAAO,IAAI,MAAM,EAAE,EAAE,QAAQ,EAAE,OAAO,CAAC,MAAM,KAAK,MAAM;AACtD,YAAI,OAAO;AACX,YAAI,MAAM,KAAK,IAAI,MAAM,GAAG;AAC1B,kBAAQ;AAAA,QACV;AACA,eAAO,OAAO;AAAA,MAChB,GAAG,EAAE;AAAA,IACP;AAEO,IAAM,gBAAgB,CAAC,SAAiB;AAC7C,aAAO;AAAA,QACL,GAAmC;AAAA,QACnC,GAAmC;AAAA,QACnC,GAAmC;AAAA,QACnC,GAAmC;AAAA,QACnC,GAAmC;AAAA,QACnC,IAAmC;AAAA,QACnC,IAAmC;AAAA,QACnC,IAAmC;AAAA,QACnC,KAAmC;AAAA,QACnC,KAAmC;AAAA,QACnC,KAAmC;AAAA,QACnC,MAAmC;AAAA,QACnC,MAAmC;AAAA,QACnC,MAAmC;AAAA,QACnC,MAAmC;AAAA,QACnC,OAAmC;AAAA,QACnC,OAAmC;AAAA,QACnC,OAAmC;AAAA,QACnC,QAAmC;AAAA,QACnC,QAAmC;AAAA,QACnC,QAAmC;AAAA,QACnC,SAAmC;AAAA,QACnC,SAAmC;AAAA,QACnC,SAAmC;AAAA,QACnC,SAAmC;AAAA,QACnC,UAAmC;AAAA,QACnC,UAAmC;AAAA,QACnC,UAAmC;AAAA,QACnC,WAAmC;AAAA,QACnC,WAAmC;AAAA,QACnC,WAAmC;AAAA,QACnC,YAAmC;AAAA,MACrC,EAAE;AAAA,IACJ;AAEO,IAAM,+BAA+B,CAAC,qBAA6B;AACxE,WAAK,mBAAmB,OAAO,GAAG;AAChC,eAAO;AAAA,MACT;AACA,WAAK,mBAAmB,OAAO,GAAG;AAChC,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IACT;AAEO,IAAM,QAAQ;AAAA,MAEnB,gBAAgB;AAAA,MAEhB,cAAc;AAAA,MAEd,cAAc;AAAA,MAEd,iBAAiB;AAAA,IACnB;AAAA;AAAA;;;ACtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBO,SAAS,SAAS,WAAmB,UAAkB;AAC5D,gBAAc,aAAa,cAAc,cAAc,CAAC;AACxD,gBAAc,WAAW,KAAK,QAAQ;AACxC;AAIO,SAAS,QAAQ,UAAkB,MAAW;AACnD,QAAM,UAAU,cAAc;AAC9B,QAAM,QAAQ,OAAO,KAAK,QAAQ,QAAQ,QAAM,GAAG,GAAG,IAAI,CAAC;AAC7D;AAGO,SAAS,iBAAiB,eAA6B;AAC5D,kBAAgB,cAAc,QAA6B;AAC3D,SAAO;AACT;AAGO,SAAS,iBAAiB,MAAyB;AACxD,SAAO,gBAAgB;AACzB;AAtCA,IAUa,OAGP,iBASA;AAtBN;AAAA;AAAA;AAAA;AAEA,IAAE,IAAI,WAAW,uJAA+B;AAQzC,IAAM,QAAQ;AAGrB,IAAM,kBAEF,CAAC;AAOL,IAAM,gBAA6C,CAAC;AAAA;AAAA;",
  "names": []
}
